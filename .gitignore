# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Dependency directory
# Commenting this out is preferred by some people, see
# https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-my-node_modules-folder-into-git-
node_modules

# Users Environment Variables
.lock-wscript

.DS_Store
tests/lib/cache-db/
package/osx/files/usr/local/cinder-internal-api
installers

temp
logs
update-remote.sh
update-vm.sh
.env
.env-sam

.credentials
.config

iso/env-variables.sh
iso/ova/*.ova

aws-cloudformation/env-variables.sh

.eslintcache

test-certificates/cloudflare.ini

coturn

dist
dist-www

google-service-account.json

__pycache__
sam/samconfig.toml
sam/aws-local-env-vars.json
**/result
result
data

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

terraform/aws/config.s3.tfbackend

.idea
external-api-docker.tar.gz
web-docker.tar.gz

*.docker.tar.gz

mutagen.yml
mutagen.yml.lock

terraform/aws/temp-policy.json

*.watchman-*

config.s3.tfbackend